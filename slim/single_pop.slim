// Script copied from https://github.com/jeanrjc/BacterialSlimulations
// Modified by Sur Herrera Paredes

function (void)geneConversion(o<Individual>$ targetIndividual, integer$ meanTractLength)
{
	// Choose a source individual at random, excluding the target
	sourceIndividual = p1.sampleIndividuals(1, exclude=targetIndividual);
	
	sourceGenome = sourceIndividual.genome1;
	targetGenome = targetIndividual.genome1;
	
	// Choose a tract length and a position for the gene conversion event
	position = rdunif(1, 0, sim.chromosome.lastPosition);
	tractLength = rgeom(1, 1.0 / meanTractLength);
	p_end = (position + tractLength - 1) % sim.chromosome.lastPosition;
	
	// BCH: might just do "mutations" instead of "mutationsOfType(m1)",
	// so models that use other mutation types work without modification?
	// Is there a reason for GC to only copy m1 mutations specifically?
	// JC: You're right. Need to change this. TODO
	// source_m1_muts = sourceGenome.mutationsOfType(m1);
	// source_m1_positions = source_m1_muts.position;
	// target_m1_muts = targetGenome.mutationsOfType(m1);
	// target_m1_positions = target_m1_muts.position;
	
	//	Making more general for all mutations
	source_muts = sourceGenome.mutations;
	source_positions = source_muts.position;
	target_muts = targetGenome.mutations;
	target_positions = target_muts.position;
	
	// Get the mutations from the sourceGenome and targetGenome that are within the GC tract
	// If p_end < position, it means that we're over the edge of the chr
	if (p_end < position)
	{
		mutToCopy = source_muts[source_positions <= p_end | source_positions >= position];
		mutToRemove = target_muts[target_positions <= p_end | target_positions >= position];
	}
	// Else it's normal
	else
	{
		mutToCopy = source_muts[source_positions >= position & source_positions <= p_end];
		mutToRemove = target_muts[target_positions >= position & target_positions <= p_end];
	}
	
	// Remove the mutations from targetGenome that are within the tract
	targetGenome.removeMutations(mutToRemove);
	
	// Add the mutations found in sourceGenome
	targetGenome.addMutations(mutToCopy);
	
	return;
}

function (void)readMS(string$ path)
{
	// Read an MS file and create mutations; adapted from manual recipe 13.4
	// with modifications specifically for the haploid case
	lines = readFile(path);
	index = 0;
	
	// skip lines until reaching the // line, then skip that line
	while (lines[index] != "//")
		index = index + 1;
	index = index + 1;
	
	if (index + 2 + p1.individualCount > size(lines))
		stop("File is too short; terminating.");
	
	// next line should be segsites:
	segsitesLine = lines[index];
	index = index + 1;
	parts = strsplit(segsitesLine);
	if (size(parts) != 2) stop("Malformed segsites.");
	if (parts[0] != "segsites:") stop("Missing segsites.");
	segsites = asInteger(parts[1]);
	
	// and next is positions:
	positionsLine = lines[index];
	index = index + 1;
	parts = strsplit(positionsLine);
	// If trailing space at the end of the positions array (as outputed by ms)
	if (size(parts) == segsites + 2)
	{
		parts = parts[0:segsites];
	}
	if (size(parts) != segsites + 1) stop("Malformed positions.");
	if (parts[0] != "positions:") stop("Missing positions.");
	positions = asFloat(parts[1:(size(parts)-1)]);
	
	// create all mutations in a genome in a dummy subpopulation
	sim.addSubpop("p1000", 1);
	g = p1000.individuals.genome1;
	L = sim.chromosome.lastPosition;
	intPositions = asInteger(floor(positions * L));
	muts = g.addNewMutation(m1, 0.0, intPositions);
	
	// add the appropriate mutations to each first genome (haploid)
	for (hg in p1.individuals.genome1)
	{
		f = asLogical(asInteger(strsplit(lines[index], "")));
		index = index + 1;
		hg.addMutations(muts[f]);
	}
	
	// remove the dummy subpopulation
	p1000.setSubpopulationSize(0);
}

function (void)write_sample_pop(string$ outpath, integer$ n_samples, integer$ generation){
	// output only genomes with mutations
	haploidGenomes = p1.individuals.genome1;
	
	if (size(haploidGenomes) <= n_samples){
		haploidGenomesSample = haploidGenomes;
	} else{
		haploidGenomesSample = sample(haploidGenomes, n_samples);
	}
	
	//	haploidGenomesSample.outputMS(filePath = outpath + "/gen_" + generation + ".ms");
	haploidGenomesSample.output(filePath = outpath + "/gen_" + generation + ".slimout");
	
	// Output custom info file
	// Write snps_info.txt
	//	filename = outpath + "/gen_" + generation + "_snps_info.txt";
	//	writeFile(filename, "site_id\tref_id\tref_pos\ts_coef\tm_type");
	//	for (mut in sim.mutations){
	//		m_id = mut.id;
	//		m_pos = mut.position;
	//		m_scoef = mut.selectionCoeff;
	//		m_type = paste(mut.mutationType);
	//		
	//		if(sum(m_type == c("MutationType<m1>", "MutationType<m2>", "MutationType<m3>")) == 1){
	//			if(m_type == "MutationType<m1>"){
	//				m_type = "m1";
	//			}
	//			
	//			if(m_type == "MutationType<m2>"){
	//				m_type = "m2";
	//			}
	//			
	//			if(m_type == "MutationType<m3>"){
	//				m_type = "m3";
	//			}
	//						
	//		}else{
	//			stop("Unknown mutation type");
	//		}
	//	
	//		line = paste(c(m_id, "chr1", m_pos, m_scoef, m_type), sep = "\t");
	//		// line = paste(line + "\n");
	//		writeFile(filename, line, append = T);
	//	}

}


initialize()
{
	//	//  The parameters below can be passed from external script
	//	defineConstant("Ne", 1400); // The effective population size
	//	defineConstant("Mu", 1e-7); // Mutation rate
	//	defineConstant("Rho", 1e-7); // Recombination rate
	//	defineConstant("genomeSize", 1e6); // Genome size in bp
	//	defineConstant("gcBurnin", 0); // Not documented
	//	defineConstant("tractlen", 1e5); // Average HGT tract length
	//	defineConstant("runId", "testrun"); // Run ID
	//	defineConstant("runIdShort", "trun"); // Short Run ID
	//	defineConstant("N_generations", 50); // Short Run ID
	//	defineConstant("sampleSize", 20); // Genomes to sample
	//	defineConstant("scoef1", 0.01); // Selection advantage
	//	defineConstant("prop_selection", 0.0); // Proportion of de novo mutation with fitness advantage
	//	//	defineConstant("x1", rdunif(1, 1, 10000000)); // random seed for ms otherwise there is a risk that it reuses seed from previous run.
	//	//	defineConstant("x2", rdunif(1, 1, 10000000)); // random seed for ms
	//	//	defineConstant("x3", rdunif(1, 1, 10000000)); // random seed for ms
	//	defineConstant("seed", rdunif(1, 1, 10000000)); // Seed for simulation
	//	defineConstant("info_file", "standing_variation/snps_info.txt"); // tsv file with header & sites for selection in the 5-th column
	//	defineConstant("outdir", "sim_x/pop_10"); // Directory for writint output
	//	defineConstant("standing_variation", "standing_variation/standing_variation.ms"); // ms file with standing variation
	//	defineConstant("print_period", 10); // How many generations between sampling
	
	setSeed(seed);
	// Following are defined by original authors  
	defineConstant("Theta", 2*Ne*Mu); // Theta
	defineConstant("GCrate", Rho * genomeSize); // HGT probability
	defineConstant("msRho", 2* Ne * gcBurnin * genomeSize); // HGT probability
	initializeMutationRate(Mu);
	initializeMutationType("m1", 1.0, "f", 0.0); // Standing mutations
	initializeMutationType("m2", 1.0, "f", 0.0); // de novo neutral mutations
	initializeMutationType("m3", 1.0, "f", scoef1); // de novo selected mutations
	initializeGenomicElementType("g1", c(m2, m3), c(1.0 - prop_selection, prop_selection));
	initializeGenomicElement(g1, 0, genomeSize - 1);
	initializeRecombinationRate(0); // In SLiM recombination is between sister chromatids
}

// At the first generation:
// - create a subpopulation (or many)
// - add diversity to it by loading files obtain after a burnin run with ms
1 late()
{
	sim.setValue("GC", 0); // logging purpose
	sim.setValue("nindiv", 0);
	sim.addSubpop("p1", asInteger(Ne));
	p1.setCloningRate(1.0); // Essential for bacteria.
	c1 = clock();
	
	// read the ms output file
	// Here I probably need to add option to make some of those mutations selected
	readMS(standing_variation);
	
	
	// Read info file and get positions under selection	
	sel_ii = NULL;
	info = readFile(info_file);
	for( i in 0:(length(info) - 1) ){
		if(i == 0){
			if(info[i] == "site_id\tref_id\tref_pos\tmaf\tsel"){
				cat("Header matches\n");
			}else{
				stop("Header doesn't match\n");
			}
		}else{
			line = strsplit(info[i], "\t");
			pos = asInteger(line[2]);
			sel = asFloat(line[4]);
			
			// Right now I'm not using sel except as
			// a flag, and not using pos
			// NOTE: I am not using pos because there is
			// discrepancy in the rounding to positions that I
			// get from R and eidos, so I cannot easily 
			// mix processing from both scripts
			if(sel != 0){
				sel_ii = c(sel_ii, i - 1);
			}
		}
	}
	cat("Found " + length(sel_ii) + " positions to change their selection coefficient\n");
	if(length(sel_ii) > 0){
		// Update selection coefficient of mutations under selection
		cat("Updating selecction coefficients\n");
		for(i in sel_ii){
			cat(">" + sim.mutations.position[i] + "\t" + sim.mutations[i].id +"\n");
			sim.mutations[i].setSelectionCoeff(scoef1); // Using passed selection coefficient
		}
	}
	
	
	c2 = clock();
	c3 = c2 - c1;
	writeFile(runId + ".time", runIdShort+"\tWF\tburnin\t"+c3, append=F);
	sim.setValue("time_beg", clock());
	
	sim.rescheduleScriptBlock(s1, start=N_generations, end=N_generations);
}


// Remove mutation on the 2nd chromosome
// at each generation so we don't keep in memory useless mutations
modifyChild()
{
	childGenome2.removeMutations();
	return T;
}

// At each generation:
// - Remove fixed mutations
// - Perform gene conversion events
late()
{
	// Remove fixed mutation
	// (SLiM does it automatically for diploid,
	// but for haploid, mutations are fixed at 0.5)
	//	muts = sim.mutationsOfType(m1);
	// Removing all fixed mutations, not only m1, do I want to do this?
	// muts = sim.mutations;
	// freqs = sim.mutationFrequencies(NULL, muts);
	// fixed_muts = muts[freqs == 0.5];
	// if (size(fixed_muts) > 0)
	//	sim.subpopulations.genomes.removeMutations(fixed_muts, T);
	
	// Gene Conversion event
	// each individual has a proba of gene conversion per bp
	if (GCrate > 0)
	{
		nindiv = rbinom(1, Ne, GCrate);
		sim.setValue("nindiv", sim.getValue("nindiv")+nindiv); // logging purpose
		
		// choose targets for gene conversion; each individual can only be a target
		// once per generation, to more closely mirror the nonWF model's logic
		GCtargets = p1.sampleIndividuals(nindiv, replace=F);
		
		for (target in GCtargets)
			geneConversion(target, tractlen);
		
		sim.setValue("GC", sim.getValue("GC")+nindiv); // logging purpose
	}
	
	// Print periodically
	if( (sim.generation == 1) | (sim.generation % print_period == 0) ){
		write_sample_pop(outdir, sampleSize, sim.generation);
	}
}

early()
{
	if (sim.generation % 1000 == 0)
	{
		cat(">> (" + sim.generation + ") GC : ");
		catn(sim.getValue("GC"));
	}
	sim.setValue("GC", 0);
}

// At the end of the simulation, sample
// sampleSize genomes and output it in ms format.
// The generation number here just needs to be way bigger than anything I plan to use
s1 10000 late()
{
	
	
	// These are related to calculations in the HGT rates, but don't fully understand them	
	// catn("GC:  " + sim.getValue("GC"));
	// catn("n_sample:    " + n_samples);
	// catn("mean indiv with GC:  " + sim.getValue("nindiv")/sim.generation);
	
	// Print if we are not at a printing stop
	if( sim.generation % print_period != 0 ){
		write_sample_pop(outdir, sampleSize, sim.generation);
	}
	
	sim.setValue("time_end", clock());
	c3 = sim.getValue("time_end") - sim.getValue("time_beg");
	writeFile(runId + ".time", runIdShort+"\tWF\tfwd\t"+c3, append=T);
	
	//	sim.outputFull("full_output.txt");
	//	catn("generation " + sim.generation);
	sim.simulationFinished();
}

